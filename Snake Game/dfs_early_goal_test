def dfs_move(self):
        visited = set()
        stack = deque([(self.snake.x[0], self.snake.y[0], self.snake.direction)])

        directions = [("up", (0, -SIZE)), ("down", (0, SIZE)), ("left", (-SIZE, 0)), ("right", (SIZE, 0))]

        def is_valid_move(x, y):
            # Define valid positions for edges and corners
            valid_positions_x = {0, 1041}
            valid_positions_y = {0, 841}
            corners = [(0, 0), (0, 760), (960, 0), (960, 760)]

            # Check if the new position is on the edge or corner
            if x in valid_positions_x:
                return False
            if y in valid_positions_y:
                return False
            if (x, y) in corners:
                return False

            # Check if the position has already been visited
            if (x, y) in visited:
                return False
            
            return True

        while stack:
            x, y, direction = stack.pop()

            # If the snake reaches the apple, update the direction and exit
            if x == self.apple.x and y == self.apple.y:
                self.snake.direction = direction
                return

            visited.add((x, y))

            # Explore all possible directions
            for new_direction, (dx, dy) in directions:
                new_x, new_y = x + dx, y + dy
                if is_valid_move(new_x, new_y):
                    stack.append((new_x, new_y, new_direction))

        # If no path is found, choose a random direction to avoid getting stuck
        self.snake.direction = random.choice(["up", "down", "left", "right"])
